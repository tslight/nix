#+TITLE: NIXOS CONFIGURATION
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args+ :tangle-mode (identity #o644)
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :padline no

* DEFAULT CONFIGURATION

A store of the standard settings generated by the graphical installer. Left
here for documentation purposes more than anything - tangling turned off.

#+NAME: configuration
#+BEGIN_SRC nix :tangle no
  { config, pkgs, ... }:
  {
    imports = [ ./hardware-configuration.nix ];

    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;

    networking.hostName = "100E"; # Define your hostname.
    # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Enable networking
    networking.networkmanager.enable = true;

    # Set your time zone.
    time.timeZone = "Europe/London";

    # Select internationalisation properties.
    i18n.defaultLocale = "en_GB.UTF-8";

    i18n.extraLocaleSettings = {
      LC_ADDRESS = "en_GB.UTF-8";
      LC_IDENTIFICATION = "en_GB.UTF-8";
      LC_MEASUREMENT = "en_GB.UTF-8";
      LC_MONETARY = "en_GB.UTF-8";
      LC_NAME = "en_GB.UTF-8";
      LC_NUMERIC = "en_GB.UTF-8";
      LC_PAPER = "en_GB.UTF-8";
      LC_TELEPHONE = "en_GB.UTF-8";
      LC_TIME = "en_GB.UTF-8";
    };

    # Enable the X11 windowing system.
    services.xserver.enable = true;

    # Enable the KDE Plasma Desktop Environment.
    services.xserver.displayManager.sddm.enable = true;
    services.xserver.desktopManager.plasma5.enable = true;

    # Configure keymap in X11
    services.xserver = {
      layout = "gb";
      xkbVariant = "";
    };

    # Configure console keymap
    console.keyMap = "uk";

    # Enable CUPS to print documents.
    services.printing.enable = true;

    # Enable sound with pipewire.
    sound.enable = true;
    hardware.pulseaudio.enable = false;
    security.rtkit.enable = true;
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      # If you want to use JACK applications, uncomment this
      #jack.enable = true;
      # use the example session manager (no others are packaged yet so
      # this is enabled by default, no need to redefine it in your
      # config for now)
      #media-session.enable = true;
    };

    # Enable touchpad support (enabled default in most desktopManager).
    # services.xserver.libinput.enable = true;

    # Define a user account. Don't forget to set a password with ‘passwd’.
    users.users.toby = {
      isNormalUser = true;
      description = "Toby";
      extraGroups = [ "networkmanager" "wheel" ];
    };

    # Enable automatic login for the user.
    services.xserver.displayManager.autoLogin.enable = true;
    services.xserver.displayManager.autoLogin.user = "toby";
    services.xserver.displayManager.defaultSession = "plasmawayland";

    # Allow unfree packages
    nixpkgs.config.allowUnfree = true;

    # List packages installed in system profile. To search, run:
    # $ nix search wget

    # Some programs need SUID wrappers, can be configured further or are
    # started in user sessions.
    # programs.mtr.enable = true;
    # programs.gnupg.agent = {
    #   enable = true;
    #   enableSSHSupport = true;
    # };

    # List services that you want to enable:
    # services.fwupd.enable = true;

    # Enable the OpenSSH daemon.
    # services.openssh.enable = true;

    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # networking.firewall.enable = false;

    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "23.05"; # Did you read the comment?
  }
#+END_SRC
#+BEGIN_SRC nix :noweb yes :tangle no
  <<configuration>>
#+END_SRC

* MY CONFIGURATION

These are my customisations of the default system, thus in order to apply these
to a freshly installed system simply tangle the nix block below and then run:

#+BEGIN_SRC shell :tangle no :dir "/sudo::/" :cache no
  sudo nixos-rebuild -I nixos-config=/etc/nixos/my-configuration.nix switch
#+END_SRC

#+NAME: my-configuration
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/my-configuration.nix
  { config, pkgs, ... }:
  {
    imports = [
      ./configuration.nix
    ];

    services.udev.extraHwdb = ''
      # cat /proc/bus/input/devices | grep -i keyboard -A 9 -B 1
      # Lenovo 100E 2nd Gen
      evdev:input:b0011v0001p0001*
       KEYBOARD_KEY_01=capslock         # esc   --> caps
       KEYBOARD_KEY_3a=esc              # caps  --> esc
       KEYBOARD_KEY_38=leftctrl         # alt   --> leftctrl
       KEYBOARD_KEY_db=leftalt          # super --> leftalt
       KEYBOARD_KEY_1d=leftmeta         # ctrl  --> super
       KEYBOARD_KEY_b8=leftctrl         # altgr --> leftctrl
       KEYBOARD_KEY_9d=leftalt          # ctrl  --> leftalt (otherwise altgr)
    '';

    programs = {
      git.enable = true;
      tmux.enable = true;
      zsh.enable = true;
      neovim.enable = true;
      hyprland.enable = true;
    };

    users.defaultUserShell = pkgs.zsh;

    environment.systemPackages = with pkgs; [
      ansible
      cowsay
      curl
      mg
      python3Full
      rsync
      wget
      firefox
      emacs29-pgtk
      kitty
      wofi
    ];
  }
#+END_SRC
#+BEGIN_SRC nix :noweb yes :tangle ./my-configuration.nix
  <<my-configuration>>
#+END_SRC

* COMMENT Local Variables                                  :NOEXPORT:ARCHIVE:
# Local Variables:
# eval: (make-local-variable 'org-babel-post-tangle-hook)
# eval: (remove-hook 'org-babel-post-tangle-hook 'emacs-lisp-byte-compile-and-load t)
# eval: (setq org-confirm-babel-evaluate 'nil)
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
